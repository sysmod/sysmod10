/*
 * generated by Fujaba - CodeGen2
 */
package sysmod.mancala;
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath


public class Pit
{



   /**
    * <pre>
    *           0..n     contains     0..1
    * Pit ------------------------- GameBoard
    *           pit               gameBoard
    * </pre>
    */
   public static final String PROPERTY_GAME_BOARD = "gameBoard";

   @Property( name = PROPERTY_GAME_BOARD, partner = GameBoard.PROPERTY_PIT, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private GameBoard gameBoard;

   @Property( name = PROPERTY_GAME_BOARD )
   public boolean setGameBoard (GameBoard value)
   {
      boolean changed = false;

      if (this.gameBoard != value)
      {
      
         GameBoard oldValue = this.gameBoard;
         Pit source = this;
         if (this.gameBoard != null)
         {
            this.gameBoard = null;
            oldValue.removeFromPit (this);
         }
         this.gameBoard = value;

         if (value != null)
         {
            value.addToPit (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_GAME_BOARD )
   public Pit withGameBoard (GameBoard value)
   {
      setGameBoard (value);
      return this;
   }

   public GameBoard getGameBoard ()
   {
      return this.gameBoard;
   }

   /**
    * <pre>
    *           0..n     owns     0..1
    * Pit ------------------------- Player
    *           pit               player
    * </pre>
    */
   public static final String PROPERTY_PLAYER = "player";

   @Property( name = PROPERTY_PLAYER, partner = Player.PROPERTY_PIT, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Player player;

   @Property( name = PROPERTY_PLAYER )
   public boolean setPlayer (Player value)
   {
      boolean changed = false;

      if (this.player != value)
      {
      
         Player oldValue = this.player;
         Pit source = this;
         if (this.player != null)
         {
            this.player = null;
            oldValue.removeFromPit (this);
         }
         this.player = value;

         if (value != null)
         {
            value.addToPit (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PLAYER )
   public Pit withPlayer (Player value)
   {
      setPlayer (value);
      return this;
   }

   public Player getPlayer ()
   {
      return this.player;
   }

   public static final String PROPERTY_SEEDS = "seeds";

   @Property( name = PROPERTY_SEEDS, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private int seeds;

   @Property( name = PROPERTY_SEEDS )
   public void setSeeds (int value)
   {
      this.seeds = value;
   }

   public Pit withSeeds (int value)
   {
      setSeeds (value);
      return this;
   }

   @Property( name = PROPERTY_SEEDS )
   public int getSeeds ()
   {
      return this.seeds;
   }

   public void removeYou()
   {
      this.setGameBoard (null);
      this.setPlayer (null);
   }
}


