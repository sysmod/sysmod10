/*
 * generated by Fujaba - CodeGen2
 */
package sysmod.mancala;
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import de.upb.tools.pcs.PropertyChangeClient; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import java.beans.PropertyChangeSupport;
import java.beans.PropertyChangeListener;


public abstract class AbstractPit	implements PropertyChangeClient
{


	protected final PropertyChangeSupport listeners = new PropertyChangeSupport(this);

	public void addPropertyChangeListener(PropertyChangeListener listener)
	{
		getPropertyChangeSupport().addPropertyChangeListener(listener);
	}

	public void removePropertyChangeListener(PropertyChangeListener listener)
	{
		getPropertyChangeSupport().removePropertyChangeListener(listener);
	}

	public void addPropertyChangeListener(String property, PropertyChangeListener listener)
	{
		getPropertyChangeSupport().addPropertyChangeListener(property, listener);
	}

	public void removePropertyChangeListener(String property, PropertyChangeListener listener)
	{
		getPropertyChangeSupport().removePropertyChangeListener(property, listener);
	}

	public PropertyChangeSupport getPropertyChangeSupport()
	{
		return listeners;
	}


   public abstract void accept (MakeMoveVisitor visitor );

   /**
    * <pre>
    *           0..1     next of     0..1
    * AbstractPit ------------------------> AbstractPit
    *           abstractPit               nextPit
    * </pre>
    */
   public static final String PROPERTY_NEXT_PIT = "nextPit";

   @Property( name = PROPERTY_NEXT_PIT, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private AbstractPit nextPit;

   @Property( name = PROPERTY_NEXT_PIT )
   public boolean setNextPit (AbstractPit value)
   {
      boolean changed = false;

      if (this.nextPit != value)
      {
      
         AbstractPit oldValue = this.nextPit;
         this.nextPit = value;
         getPropertyChangeSupport().firePropertyChange(PROPERTY_NEXT_PIT, oldValue, value);
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_NEXT_PIT )
   public AbstractPit withNextPit (AbstractPit value)
   {
      setNextPit (value);
      return this;
   }

   public AbstractPit getNextPit ()
   {
      return this.nextPit;
   }

   /**
    * <pre>
    *           0..n     owns     0..1
    * AbstractPit ------------------------- Player
    *           pit               player
    * </pre>
    */
   public static final String PROPERTY_PLAYER = "player";

   @Property( name = PROPERTY_PLAYER, partner = Player.PROPERTY_PIT, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Player player;

   @Property( name = PROPERTY_PLAYER )
   public boolean setPlayer (Player value)
   {
      boolean changed = false;

      if (this.player != value)
      {
      
         Player oldValue = this.player;
         AbstractPit source = this;
         if (this.player != null)
         {
            this.player = null;
            oldValue.removeFromPit (this);
         }
         this.player = value;

         if (value != null)
         {
            value.addToPit (this);
         }
            getPropertyChangeSupport().firePropertyChange(PROPERTY_PLAYER, oldValue, value);
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PLAYER )
   public AbstractPit withPlayer (Player value)
   {
      setPlayer (value);
      return this;
   }

   public Player getPlayer ()
   {
      return this.player;
   }

   public static final String PROPERTY_SEEDS = "seeds";

   @Property( name = PROPERTY_SEEDS, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private int seeds;

   @Property( name = PROPERTY_SEEDS )
   public void setSeeds (int value)
   {
      if ( this.seeds != value )
      {
         int oldValue = this.seeds;
         this.seeds = value;
         getPropertyChangeSupport().firePropertyChange(PROPERTY_SEEDS, oldValue, value);
      }
   }

   public AbstractPit withSeeds (int value)
   {
      setSeeds (value);
      return this;
   }

   @Property( name = PROPERTY_SEEDS )
   public int getSeeds ()
   {
      return this.seeds;
   }

   public void removeYou()
   {
      this.setNextPit (null);
      this.setPlayer (null);
   }
}


