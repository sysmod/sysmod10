/*
 * generated by Fujaba - CodeGen2
 */
package sysmod.mancala;
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import java.util.*;
import de.upb.tools.fca.*; // requires Fujaba5/libs/RuntimeTools.jar in classpath


public class GameBoard
{



   /**
    * <pre>
    *           0..1     contains     0..n
    * GameBoard ------------------------- Pit
    *           gameBoard               pit
    * </pre>
    */
   public static final String PROPERTY_PIT = "pit";

   @Property( name = PROPERTY_PIT, partner = Pit.PROPERTY_GAME_BOARD, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.NONE)
   private FLinkedList<Pit> pit;

   @Property( name = PROPERTY_PIT )
   public List<? extends Pit> getPit()
   {
      return ((this.pit == null)
              ? Collections.EMPTY_LIST
              : Collections.unmodifiableList(this.pit));
   }

   @Property( name = PROPERTY_PIT )
   public boolean addToPit (Pit value)
   {
      boolean changed = false;

      if (value != null && !this.hasInPit (value))
      {
         if (this.pit == null)
         {
            this.pit = new FLinkedList<Pit> ();

         }
      
         changed = this.pit.add (value);
         if (changed)
         {
            value.setGameBoard (this);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT )
   public GameBoard withPit (Pit value)
   {
      addToPit (value);
      return this;
   }

   public GameBoard withoutPit (Pit value)
   {
      removeFromPit (value);
      return this;
   }


   public boolean removeFromPit (Pit value)
   {
      boolean changed = false;

      if ((this.pit != null) && (value != null))
      {
      
         changed = this.pit.remove (value);
         if (changed)
         {
            value.setGameBoard (null);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT )
   public void removeAllFromPit (){
   
      Pit tmpValue;
      Iterator<? extends Pit> iter = this.iteratorOfPit ();
      while (iter.hasNext ())
      {
         tmpValue = (Pit) iter.next ();
         this.removeFromPit (tmpValue);
      }
   
   }

   @Property( name = PROPERTY_PIT )
   public boolean hasInPit (Pit value)
   {
      return ((this.pit != null) &&
              (value != null) &&
              this.pit.contains (value));
   }

   @Property( name = PROPERTY_PIT )
   public ListIterator<? extends Pit> iteratorOfPit ()
   {
      return ((this.pit == null)
              ? FEmptyListIterator.<Pit>get ()
              : this.pit.listIterator());
   }

   @Property( name = PROPERTY_PIT )
   public int sizeOfPit ()
   {
      return ((this.pit == null)
              ? 0
              : this.pit.size ());
   }
   @Property( name = PROPERTY_PIT )
   public Pit getFirstOfPit ()
   {
      if (pit == null)
      {
         return null;
      }
      else
      {
         if (pit.size() == 0) 	 
         { 	 
            return null; 	 
         }
         return (Pit) pit.getFirst ();
      }
   }

   @Property( name = PROPERTY_PIT )
   public Pit getLastOfPit ()
   {
      if (pit == null)
      {
         return null;
      }
      else
      {
         if (pit.size() == 0) 	 
         { 	 
            return null; 	 
         }
         return (Pit) pit.getLast ();
      }
   }
   @Property( name = PROPERTY_PIT )
   public Pit getFromPit ( int index )
   {
      if (index >= 0 && index < sizeOfPit ())
      {
         return (Pit) this.pit.get (index);
      }
      else
      {
         throw new IllegalArgumentException ("getPitAt(" + index + ")" );
      }
   }

   @Property( name = PROPERTY_PIT )
   public int indexOfPit ( Pit value )
   {
      return ((this.pit == null)
              ? -1
              : this.pit.indexOf (value));
   }

   @Property( name = PROPERTY_PIT )
   public int indexOfPit ( Pit value, int index )
   {
      return ((this.pit == null)
   	       ? -1
   	       : this.pit.indexOf (value, index));
   }

   @Property( name = PROPERTY_PIT )
   public int lastIndexOfPit ( Pit value )
   {
      return ((this.pit == null)
               ? -1
               : this.pit.lastIndexOf (value));
   }

   @Property( name = PROPERTY_PIT )
   public int lastIndexOfPit ( Pit value, int index )
   {
      return ((this.pit == null)
               ? -1
               : this.pit.lastIndexOf (value, index));
   }

   @Property( name = PROPERTY_PIT )
   public boolean isBeforeOfPit ( Pit leftObject, Pit rightObject)
   {
      if (pit == null)
      {
         return false;
      }
      else
      {
         return pit.isBefore (leftObject, rightObject);
      }
   }

   @Property( name = PROPERTY_PIT )
   public boolean isAfterOfPit ( Pit leftObject, Pit rightObject)
   {
      if (pit == null)
      {
         return false;
      }
      else
      {
         return pit.isAfter (leftObject, rightObject);
      }
   }

   @Property( name = PROPERTY_PIT )
   public Pit getNextOfPit ( Pit object )
   {
      if (pit == null)
      {
         return null;
      }
      else
      {
         return (Pit) pit.getNextOf (object);
      }
   }

   @Property( name = PROPERTY_PIT )
   public Pit getNextOfPit ( Pit object, int index)
   {
      if (pit == null)
      {
         return null;
      }
      else
      {
         return (Pit) pit.getNextOf (object, index);
      }
   }

   @Property( name = PROPERTY_PIT )
   public Pit getPreviousOfPit ( Pit object)
   {
      if (pit == null)
      {
         return null;
      }
      else
      {
         return (Pit) pit.getPreviousOf (object);
      }
   }

   @Property( name = PROPERTY_PIT )
   public Pit getPreviousOfPit ( Pit object, int index )
   {
      if (pit == null)
      {
         return null;
      }
      else
      {
         return (Pit) pit.getPreviousOf (object, index);
      }
   }

   @Property( name = PROPERTY_PIT )
   public boolean addAfterOfPit ( Pit refObject, Pit value)
   {
      boolean changed = false;
      if (pit != null)
      {
         int index = pit.indexOf (refObject);
         changed = addToPit (index+1, value);
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT )
   public boolean addBeforeOfPit ( Pit refObject, Pit value)
   {
      boolean changed = false;
      if (pit != null)
      {
         int index = pit.indexOf (refObject);
         changed = addToPit (index, value);
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT )
   public boolean addToPit (int index, Pit value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.pit == null)
         {
            this.pit = new FLinkedList<Pit> (); // or FTreeSet () or FLinkedList ()
         }
         int oldIndex = this.indexOfPit (value);
         if (oldIndex != index)
         {
            try
            {
            
               if (oldIndex > -1)
               {
                  pit.remove (oldIndex);
               }
               pit.add (index, value);
               if (oldIndex < 0)
               {
                  value.setGameBoard (this);
               }
               changed = true;
            
            }
            catch (IndexOutOfBoundsException ex)
            {
               return false;
            }
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT )
   public boolean setInPit (int index, Pit value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.pit == null)
         {
            this.pit = new FLinkedList<Pit> (); // or FTreeSet () or FLinkedList ()
         }
         int oldIndex = this.indexOfPit (value);
         if (oldIndex != index)
         {
            try
            {
            
               Pit oldValue = (Pit)this.pit.set (index, value);
               if (oldIndex > -1)
               {
                  this.pit.remove (oldIndex);
               }
               if (oldValue != value)
               {
                  if (oldValue != null)
                  {
                     oldValue.setGameBoard (null);
                  }
                  if (oldIndex < 0)
                  {
                     value.setGameBoard (this);
                  }
                  changed = true;
               }
            
            }
            catch (IndexOutOfBoundsException ex)
            {
               return false;
            }
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT )
   public boolean removeFromPit (int index)
   {
      boolean changed = false;

      if (this.pit != null && (index >= 0 && index < this.pit.size ()))
      {
      
         Pit tmpValue = (Pit) this.pit.remove (index);
         if (tmpValue != null)
         {
            tmpValue.setGameBoard (null);
            changed = true;
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT )
   public boolean removeFromPit (int index, Pit value)
   {
      boolean changed = false;

      if ((this.pit != null) && (value != null) && 
          (index >= 0 && index < this.pit.size ()))
      {
         Pit oldValue = (Pit) this.pit.get (index);
         if (oldValue == value)
         {
         
            changed = this.removeFromPit (index);
         
         }
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT )
   public ListIterator<? extends Pit> iteratorOfPit ( Pit  lowerBound )
   {
      ListIterator<Pit> result = FEmptyListIterator.<Pit>get ();

      if (pit != null && lowerBound != null)
      {
         int index = pit.indexOf (lowerBound) + 1;
         result = pit.listIterator (index);
      }
      else if (pit != null && lowerBound == null)
      {
         result = pit.listIterator (0);
      }

      return result;
   }

   @Property( name = PROPERTY_PIT )
   public ListIterator<? extends Pit> iteratorOfPit (int index)
   {
      return ((this.pit == null)
              ? FEmptyListIterator.<Pit>get ()
              : this.pit.listIterator (Math.max(0,Math.min(index,this.pit.size ()))));
   }

   public void removeYou()
   {
      this.removeAllFromPit ();
   }
}


