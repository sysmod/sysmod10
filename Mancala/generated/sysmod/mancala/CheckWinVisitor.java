/*
 * generated by Fujaba - CodeGen2
 */
package sysmod.mancala;
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import de.upb.tools.sdm.*; // requires Fujaba5/libs/RuntimeTools.jar in classpath


public class CheckWinVisitor implements PitVisitor
{



   public static final String PROPERTY_GAME_OVER = "gameOver";

   @Property( name = PROPERTY_GAME_OVER, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private boolean gameOver = false;

   @Property( name = PROPERTY_GAME_OVER )
   public void setGameOver (boolean value)
   {
      this.gameOver = value;
   }

   public CheckWinVisitor withGameOver (boolean value)
   {
      setGameOver (value);
      return this;
   }

   @Property( name = PROPERTY_GAME_OVER )
   public boolean isGameOver ()
   {
      return this.gameOver;
   }

   public static final String PROPERTY_LOSER = "loser";

   @Property( name = PROPERTY_LOSER, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private Player loser;

   @Property( name = PROPERTY_LOSER )
   public void setLoser (Player value)
   {
      this.loser = value;
   }

   public CheckWinVisitor withLoser (Player value)
   {
      setLoser (value);
      return this;
   }

   @Property( name = PROPERTY_LOSER )
   public Player getLoser ()
   {
      return this.loser;
   }

   public static final String PROPERTY_SEEDS = "seeds";

   @Property( name = PROPERTY_SEEDS, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   public int seeds = 0;


   public static final String PROPERTY_STORES_PASSED = "storesPassed";

   @Property( name = PROPERTY_STORES_PASSED, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   public int storesPassed = 0;


   public boolean visit (Pit pit )
   {
      boolean fujaba__Success = false;


      // Count all seeds
      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // assign attribute this
         this.seeds = seeds + pit.getSeeds();
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( gameOver == true )
      {
         // If game is over then remove seeds
         // story pattern storypatternwithparams
         try 
         {
            fujaba__Success = false; 

            // check object pit is really bound
            JavaSDM.ensure ( pit != null );
            // assign attribute pit
            pit.setSeeds (0);
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }


      }
      return false;
   }

   public boolean visit (Store store )
   {
      boolean fujaba__Success = false;
      Store oppositeStore = null;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // assign attribute this
         this.storesPassed = storesPassed + 1;
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      if ( gameOver == true )
      {
         // Game over. Just place player seeds into store and determinate winner and loser.
         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // check object store is really bound
            JavaSDM.ensure ( store != null );
            // create object oppositeStore
            oppositeStore = this.winner.getStore();

            // assign attribute store
            store.setSeeds (store.getSeeds() + this.seeds);
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         if ( store.getSeeds() > oppositeStore.getSeeds() )
         {
            // story pattern storypatternwiththis
            try 
            {
               fujaba__Success = false; 

               // assign attribute this
               this.setWinner (store.getPlayer());
               // assign attribute this
               this.setLoser (oppositeStore.getPlayer());
               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }


         }
         else
         {
            // story pattern storypatternwiththis
            try 
            {
               fujaba__Success = false; 

               // assign attribute this
               this.setLoser (store.getPlayer());
               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }


         }
         return true;

      }
      if ( seeds == 0 )
      {
         // Player has run out of seeds. This means that game is over, but we still need to count other player's seeds.
         // story pattern storypatternwiththis
         try 
         {
            fujaba__Success = false; 

            // assign attribute this
            this.storesPassed = 1;
            // assign attribute this
            this.seeds = 0;
            // assign attribute this
            this.setGameOver (true);
            // assign attribute this
            this.setWinner (store.getPlayer());
            fujaba__Success = true;
         }
         catch ( JavaSDMException fujaba__InternalException )
         {
            fujaba__Success = false;
         }

         return false;

      }
      // Player still has seeds, if other player has not yet been counted then continue.
      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // assign attribute this
         this.seeds = 0;
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return storesPassed >= 2;
   }

   public static final String PROPERTY_WINNER = "winner";

   @Property( name = PROPERTY_WINNER, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private Player winner;

   @Property( name = PROPERTY_WINNER )
   public void setWinner (Player value)
   {
      this.winner = value;
   }

   public CheckWinVisitor withWinner (Player value)
   {
      setWinner (value);
      return this;
   }

   @Property( name = PROPERTY_WINNER )
   public Player getWinner ()
   {
      return this.winner;
   }

   public void removeYou()
   {
   }
}


