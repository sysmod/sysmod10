/*
 * generated by Fujaba - CodeGen2
 */
package sysmod.mancala;
import java.util.*;
import de.upb.tools.sdm.*; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import de.upb.tools.fca.*; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import de.upb.tools.pcs.PropertyChangeClient; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import java.beans.PropertyChangeSupport;
import java.beans.PropertyChangeListener;


public abstract class Player	implements PropertyChangeClient
{


	protected final PropertyChangeSupport listeners = new PropertyChangeSupport(this);

	public void addPropertyChangeListener(PropertyChangeListener listener)
	{
		getPropertyChangeSupport().addPropertyChangeListener(listener);
	}

	public void removePropertyChangeListener(PropertyChangeListener listener)
	{
		getPropertyChangeSupport().removePropertyChangeListener(listener);
	}

	public void addPropertyChangeListener(String property, PropertyChangeListener listener)
	{
		getPropertyChangeSupport().addPropertyChangeListener(property, listener);
	}

	public void removePropertyChangeListener(String property, PropertyChangeListener listener)
	{
		getPropertyChangeSupport().removePropertyChangeListener(property, listener);
	}

	public PropertyChangeSupport getPropertyChangeSupport()
	{
		return listeners;
	}


   public Store getStore ()
   {
      boolean fujaba__Success = false;
      Iterator fujaba__IterThisToStore = null;
      Object _TmpObject = null;
      Store store = null;

      // story pattern storypatternwiththis
      try 
      {
         fujaba__Success = false; 

         // iterate to-many link owns from this to store
         fujaba__Success = false;
         fujaba__IterThisToStore = this.iteratorOfPit ();

         while ( !(fujaba__Success) && fujaba__IterThisToStore.hasNext () )
         {
            try
            {
               _TmpObject =  fujaba__IterThisToStore.next ();

               // ensure correct type and really bound of object store
               JavaSDM.ensure ( _TmpObject instanceof Store );
               store = (Store) _TmpObject;


               fujaba__Success = true;
            }
            catch ( JavaSDMException fujaba__InternalException )
            {
               fujaba__Success = false;
            }
         }
         JavaSDM.ensure (fujaba__Success);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

      return store;
   }

   public abstract boolean makeMove (Pit pit );

   public static final String PROPERTY_NAME = "name";

   @Property( name = PROPERTY_NAME, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private String name;

   @Property( name = PROPERTY_NAME )
   public void setName (String value)
   {
      if ( ! JavaSDM.stringEquals (this.name, value))
      {
         String oldValue = this.name;
         this.name = value;
         getPropertyChangeSupport().firePropertyChange(PROPERTY_NAME, oldValue, value);
      }
   }

   public Player withName (String value)
   {
      setName (value);
      return this;
   }

   @Property( name = PROPERTY_NAME )
   public String getName ()
   {
      return this.name;
   }

   /**
    * <pre>
    *           0..1     opposite     0..1
    * Player ------------------------- Player
    *           opposite               opposite
    * </pre>
    */
   public static final String PROPERTY_OPPOSITE = "opposite";

   @Property( name = PROPERTY_OPPOSITE, partner = Player.PROPERTY_OPPOSITE, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Player opposite;

   @Property( name = PROPERTY_OPPOSITE )
   public boolean setOpposite (Player value)
   {
      boolean changed = false;

      if (this.opposite != value)
      {
      
         Player oldValue = this.opposite;
         Player source = this;
         if (this.opposite != null)
         {
            this.opposite = null;
            oldValue.setOpposite (null);
         }
         this.opposite = value;

         if (value != null)
         {
            value.setOpposite (this);
         }
            getPropertyChangeSupport().firePropertyChange(PROPERTY_OPPOSITE, oldValue, value);
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_OPPOSITE )
   public Player withOpposite (Player value)
   {
      setOpposite (value);
      return this;
   }

   public Player getOpposite ()
   {
      return this.opposite;
   }

   /**
    * <pre>
    *           0..1     owns     0..n
    * Player ------------------------- AbstractPit
    *           player               pit
    * </pre>
    */
   public static final String PROPERTY_PIT = "pit";

   @Property( name = PROPERTY_PIT, partner = AbstractPit.PROPERTY_PLAYER, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.NONE)
   private FPropHashSet<AbstractPit> pit;

   @Property( name = PROPERTY_PIT )
   public Set<? extends AbstractPit> getPit()
   {
      return ((this.pit == null)
              ? Collections.EMPTY_SET
              : Collections.unmodifiableSet(this.pit));
   }

   @Property( name = PROPERTY_PIT )
   public boolean addToPit (AbstractPit value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.pit == null)
         {
            this.pit = new FPropHashSet<AbstractPit> (this, PROPERTY_PIT);

         }
      
         changed = this.pit.add (value);
         if (changed)
         {
            value.setPlayer (this);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT )
   public Player withPit (AbstractPit value)
   {
      addToPit (value);
      return this;
   }

   public Player withoutPit (AbstractPit value)
   {
      removeFromPit (value);
      return this;
   }


   public boolean removeFromPit (AbstractPit value)
   {
      boolean changed = false;

      if ((this.pit != null) && (value != null))
      {
      
         changed = this.pit.remove (value);
         if (changed)
         {
            value.setPlayer (null);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT )
   public void removeAllFromPit (){
   
      AbstractPit tmpValue;
      Iterator<? extends AbstractPit> iter = this.iteratorOfPit ();
      while (iter.hasNext ())
      {
         tmpValue = (AbstractPit) iter.next ();
         this.removeFromPit (tmpValue);
      }
   
   }

   @Property( name = PROPERTY_PIT )
   public boolean hasInPit (AbstractPit value)
   {
      return ((this.pit != null) &&
              (value != null) &&
              this.pit.contains (value));
   }

   @Property( name = PROPERTY_PIT )
   public Iterator<? extends AbstractPit> iteratorOfPit ()
   {
      return ((this.pit == null)
              ? FEmptyIterator.<AbstractPit>get ()
              : this.pit.iterator ());
   }

   @Property( name = PROPERTY_PIT )
   public int sizeOfPit ()
   {
      return ((this.pit == null)
              ? 0
              : this.pit.size ());
   }

   /**
    * <pre>
    *           0..1     has     0..1
    * Player ------------------------- Turn
    *           player               turn
    * </pre>
    */
   public static final String PROPERTY_TURN = "turn";

   @Property( name = PROPERTY_TURN, partner = Turn.PROPERTY_PLAYER, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Turn turn;

   @Property( name = PROPERTY_TURN )
   public boolean setTurn (Turn value)
   {
      boolean changed = false;

      if (this.turn != value)
      {
      
         Turn oldValue = this.turn;
         Player source = this;
         if (this.turn != null)
         {
            this.turn = null;
            oldValue.setPlayer (null);
         }
         this.turn = value;

         if (value != null)
         {
            value.setPlayer (this);
         }
            getPropertyChangeSupport().firePropertyChange(PROPERTY_TURN, oldValue, value);
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_TURN )
   public Player withTurn (Turn value)
   {
      setTurn (value);
      return this;
   }

   public Turn getTurn ()
   {
      return this.turn;
   }

   public void removeYou()
   {
      this.setOpposite (null);
      this.removeAllFromPit ();
      this.setTurn (null);
   }
}


