/*
 * generated by Fujaba - CodeGen2
 */
package sysmod.mancala;
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import java.util.*;
import de.upb.tools.fca.*; // requires Fujaba5/libs/RuntimeTools.jar in classpath


public class Player
{



   public static final String PROPERTY_NAME = "name";

   @Property( name = PROPERTY_NAME, kind = ReferenceHandler.ReferenceKind.ATTRIBUTE )
   private String name;

   @Property( name = PROPERTY_NAME )
   public void setName (String value)
   {
      this.name = value;
   }

   public Player withName (String value)
   {
      setName (value);
      return this;
   }

   @Property( name = PROPERTY_NAME )
   public String getName ()
   {
      return this.name;
   }

   /**
    * <pre>
    *           0..1     owns     0..n
    * Player ------------------------- Pit
    *           player               pit
    * </pre>
    */
   public static final String PROPERTY_PIT = "pit";

   @Property( name = PROPERTY_PIT, partner = Pit.PROPERTY_PLAYER, kind = ReferenceHandler.ReferenceKind.TO_MANY,
         adornment = ReferenceHandler.Adornment.NONE)
   private FHashSet<Pit> pit;

   @Property( name = PROPERTY_PIT )
   public Set<? extends Pit> getPit()
   {
      return ((this.pit == null)
              ? Collections.EMPTY_SET
              : Collections.unmodifiableSet(this.pit));
   }

   @Property( name = PROPERTY_PIT )
   public boolean addToPit (Pit value)
   {
      boolean changed = false;

      if (value != null)
      {
         if (this.pit == null)
         {
            this.pit = new FHashSet<Pit> ();

         }
      
         changed = this.pit.add (value);
         if (changed)
         {
            value.setPlayer (this);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT )
   public Player withPit (Pit value)
   {
      addToPit (value);
      return this;
   }

   public Player withoutPit (Pit value)
   {
      removeFromPit (value);
      return this;
   }


   public boolean removeFromPit (Pit value)
   {
      boolean changed = false;

      if ((this.pit != null) && (value != null))
      {
      
         changed = this.pit.remove (value);
         if (changed)
         {
            value.setPlayer (null);
         }
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT )
   public void removeAllFromPit (){
   
      Pit tmpValue;
      Iterator<? extends Pit> iter = this.iteratorOfPit ();
      while (iter.hasNext ())
      {
         tmpValue = (Pit) iter.next ();
         this.removeFromPit (tmpValue);
      }
   
   }

   @Property( name = PROPERTY_PIT )
   public boolean hasInPit (Pit value)
   {
      return ((this.pit != null) &&
              (value != null) &&
              this.pit.contains (value));
   }

   @Property( name = PROPERTY_PIT )
   public Iterator<? extends Pit> iteratorOfPit ()
   {
      return ((this.pit == null)
              ? FEmptyIterator.<Pit>get ()
              : this.pit.iterator ());
   }

   @Property( name = PROPERTY_PIT )
   public int sizeOfPit ()
   {
      return ((this.pit == null)
              ? 0
              : this.pit.size ());
   }

   /**
    * <pre>
    *           0..1     has     0..1
    * Player ------------------------- Turn
    *           player               turn
    * </pre>
    */
   public static final String PROPERTY_TURN = "turn";

   @Property( name = PROPERTY_TURN, partner = Turn.PROPERTY_PLAYER, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Turn turn;

   @Property( name = PROPERTY_TURN )
   public boolean setTurn (Turn value)
   {
      boolean changed = false;

      if (this.turn != value)
      {
      
         Turn oldValue = this.turn;
         Player source = this;
         if (this.turn != null)
         {
            this.turn = null;
            oldValue.setPlayer (null);
         }
         this.turn = value;

         if (value != null)
         {
            value.setPlayer (this);
         }
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_TURN )
   public Player withTurn (Turn value)
   {
      setTurn (value);
      return this;
   }

   public Turn getTurn ()
   {
      return this.turn;
   }

   public void removeYou()
   {
      this.removeAllFromPit ();
      this.setTurn (null);
   }
}


