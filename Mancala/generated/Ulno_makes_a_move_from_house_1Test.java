/*
 * generated by Fujaba - CodeGen2
 */
import sysmod.mancala.Store;
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import sysmod.mancala.Player;
import sysmod.mancala.Pit;
import sysmod.mancala.Turn;
import de.upb.tools.sdm.*; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import junit.framework.AssertionFailedError;
import java.io.PrintWriter;
import java.io.StringWriter;
import sysmod.mancala.GameBoard;
import junit.framework.TestCase;


public class Ulno_makes_a_move_from_house_1Test extends TestCase
{



   /**
    * <pre>
    *           0..1     object_artjomStore     0..1
    * Ulno_makes_a_move_from_house_1Test ------------------------> Store
    *           test               artjomStore
    * </pre>
    */
   public static final String PROPERTY_ARTJOM_STORE = "artjomStore";

   @Property( name = PROPERTY_ARTJOM_STORE, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Store artjomStore;

   @Property( name = PROPERTY_ARTJOM_STORE )
   public boolean setArtjomStore (Store value)
   {
      boolean changed = false;

      if (this.artjomStore != value)
      {
      
         Store oldValue = this.artjomStore;
         this.artjomStore = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_ARTJOM_STORE )
   public Ulno_makes_a_move_from_house_1Test withArtjomStore (Store value)
   {
      setArtjomStore (value);
      return this;
   }

   public Store getArtjomStore ()
   {
      return this.artjomStore;
   }

   /**
    * <pre>
    *           0..1     object_artjom     0..1
    * Ulno_makes_a_move_from_house_1Test ------------------------> Player
    *           test               artjom
    * </pre>
    */
   public static final String PROPERTY_ARTJOM = "artjom";

   @Property( name = PROPERTY_ARTJOM, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Player artjom;

   @Property( name = PROPERTY_ARTJOM )
   public boolean setArtjom (Player value)
   {
      boolean changed = false;

      if (this.artjom != value)
      {
      
         Player oldValue = this.artjom;
         this.artjom = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_ARTJOM )
   public Ulno_makes_a_move_from_house_1Test withArtjom (Player value)
   {
      setArtjom (value);
      return this;
   }

   public Player getArtjom ()
   {
      return this.artjom;
   }

   public void assertStep1 ()
   {
      boolean fujaba__Success = false;

      // // result situation: 
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // check object artjom is really bound
         JavaSDM.ensure ( artjom != null, "check object artjom is really bound" );
         // check object pit1 is really bound
         JavaSDM.ensure ( pit1 != null, "check object pit1 is really bound" );
         // check object pit2 is really bound
         JavaSDM.ensure ( pit2 != null, "check object pit2 is really bound" );
         // check object pit3 is really bound
         JavaSDM.ensure ( pit3 != null, "check object pit3 is really bound" );
         // check object turn is really bound
         JavaSDM.ensure ( turn != null, "check object turn is really bound" );
         // check object ulno is really bound
         JavaSDM.ensure ( ulno != null, "check object ulno is really bound" );
         // check isomorphic binding between objects ulno and artjom
         JavaSDM.ensure ( !ulno.equals (artjom), "check isomorphic binding between objects ulno and artjom" );

         // check isomorphic binding between objects pit2 and pit1
         JavaSDM.ensure ( !pit2.equals (pit1), "check isomorphic binding between objects pit2 and pit1" );

         // check isomorphic binding between objects pit3 and pit1
         JavaSDM.ensure ( !pit3.equals (pit1), "check isomorphic binding between objects pit3 and pit1" );

         // check isomorphic binding between objects pit3 and pit2
         JavaSDM.ensure ( !pit3.equals (pit2), "check isomorphic binding between objects pit3 and pit2" );

         // check link has from turn to artjom
         JavaSDM.ensure (artjom.equals (turn.getPlayer ()), "check link has from turn to artjom");

         // check link has from turn to ulno
         JavaSDM.ensure (!(ulno.equals (turn.getPlayer ())), "check link has from turn to ulno");

         // check link owns from pit1 to ulno
         JavaSDM.ensure (ulno.equals (pit1.getPlayer ()), "check link owns from pit1 to ulno");

         // check link owns from pit2 to ulno
         JavaSDM.ensure (ulno.equals (pit2.getPlayer ()), "check link owns from pit2 to ulno");

         // check link owns from pit3 to ulno
         JavaSDM.ensure (ulno.equals (pit3.getPlayer ()), "check link owns from pit3 to ulno");

         // attribute condition seeds == 0
         JavaSDM.ensure ( pit1.getSeeds () == 0, "attribute condition seeds == 0" );

         // attribute condition seeds == 0
         JavaSDM.ensure ( pit3.getSeeds () == 0, "attribute condition seeds == 0" );

         // attribute condition seeds == 1
         JavaSDM.ensure ( pit2.getSeeds () == 1, "attribute condition seeds == 1" );

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
         StringWriter fujaba_StringWriter = new StringWriter();
         PrintWriter fujaba_PrintWriter = new PrintWriter(fujaba_StringWriter);
         fujaba__InternalException.printStackTrace(fujaba_PrintWriter);
         int length = fujaba__InternalException.getClass().getName().length() + 2;
         AssertionFailedError fujaba_AssertionFailedError = new AssertionFailedError(fujaba_StringWriter.toString().substring(length));
         fujaba_AssertionFailedError.setStackTrace(new StackTraceElement[] {});
         throw fujaba_AssertionFailedError;
      }

   }

   /**
    * <pre>
    *           0..1     object_board     0..1
    * Ulno_makes_a_move_from_house_1Test ------------------------> GameBoard
    *           test               board
    * </pre>
    */
   public static final String PROPERTY_BOARD = "board";

   @Property( name = PROPERTY_BOARD, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private GameBoard board;

   @Property( name = PROPERTY_BOARD )
   public boolean setBoard (GameBoard value)
   {
      boolean changed = false;

      if (this.board != value)
      {
      
         GameBoard oldValue = this.board;
         this.board = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_BOARD )
   public Ulno_makes_a_move_from_house_1Test withBoard (GameBoard value)
   {
      setBoard (value);
      return this;
   }

   public GameBoard getBoard ()
   {
      return this.board;
   }

   /**
    * <pre>
    *           0..1     object_pit10     0..1
    * Ulno_makes_a_move_from_house_1Test ------------------------> Pit
    *           test               pit10
    * </pre>
    */
   public static final String PROPERTY_PIT10 = "pit10";

   @Property( name = PROPERTY_PIT10, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Pit pit10;

   @Property( name = PROPERTY_PIT10 )
   public boolean setPit10 (Pit value)
   {
      boolean changed = false;

      if (this.pit10 != value)
      {
      
         Pit oldValue = this.pit10;
         this.pit10 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT10 )
   public Ulno_makes_a_move_from_house_1Test withPit10 (Pit value)
   {
      setPit10 (value);
      return this;
   }

   public Pit getPit10 ()
   {
      return this.pit10;
   }

   /**
    * <pre>
    *           0..1     object_pit11     0..1
    * Ulno_makes_a_move_from_house_1Test ------------------------> Pit
    *           test               pit11
    * </pre>
    */
   public static final String PROPERTY_PIT11 = "pit11";

   @Property( name = PROPERTY_PIT11, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Pit pit11;

   @Property( name = PROPERTY_PIT11 )
   public boolean setPit11 (Pit value)
   {
      boolean changed = false;

      if (this.pit11 != value)
      {
      
         Pit oldValue = this.pit11;
         this.pit11 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT11 )
   public Ulno_makes_a_move_from_house_1Test withPit11 (Pit value)
   {
      setPit11 (value);
      return this;
   }

   public Pit getPit11 ()
   {
      return this.pit11;
   }

   /**
    * <pre>
    *           0..1     object_pit12     0..1
    * Ulno_makes_a_move_from_house_1Test ------------------------> Pit
    *           test               pit12
    * </pre>
    */
   public static final String PROPERTY_PIT12 = "pit12";

   @Property( name = PROPERTY_PIT12, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Pit pit12;

   @Property( name = PROPERTY_PIT12 )
   public boolean setPit12 (Pit value)
   {
      boolean changed = false;

      if (this.pit12 != value)
      {
      
         Pit oldValue = this.pit12;
         this.pit12 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT12 )
   public Ulno_makes_a_move_from_house_1Test withPit12 (Pit value)
   {
      setPit12 (value);
      return this;
   }

   public Pit getPit12 ()
   {
      return this.pit12;
   }

   /**
    * <pre>
    *           0..1     object_pit1     0..1
    * Ulno_makes_a_move_from_house_1Test ------------------------> Pit
    *           test               pit1
    * </pre>
    */
   public static final String PROPERTY_PIT1 = "pit1";

   @Property( name = PROPERTY_PIT1, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Pit pit1;

   @Property( name = PROPERTY_PIT1 )
   public boolean setPit1 (Pit value)
   {
      boolean changed = false;

      if (this.pit1 != value)
      {
      
         Pit oldValue = this.pit1;
         this.pit1 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT1 )
   public Ulno_makes_a_move_from_house_1Test withPit1 (Pit value)
   {
      setPit1 (value);
      return this;
   }

   public Pit getPit1 ()
   {
      return this.pit1;
   }

   /**
    * <pre>
    *           0..1     object_pit2     0..1
    * Ulno_makes_a_move_from_house_1Test ------------------------> Pit
    *           test               pit2
    * </pre>
    */
   public static final String PROPERTY_PIT2 = "pit2";

   @Property( name = PROPERTY_PIT2, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Pit pit2;

   @Property( name = PROPERTY_PIT2 )
   public boolean setPit2 (Pit value)
   {
      boolean changed = false;

      if (this.pit2 != value)
      {
      
         Pit oldValue = this.pit2;
         this.pit2 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT2 )
   public Ulno_makes_a_move_from_house_1Test withPit2 (Pit value)
   {
      setPit2 (value);
      return this;
   }

   public Pit getPit2 ()
   {
      return this.pit2;
   }

   /**
    * <pre>
    *           0..1     object_pit3     0..1
    * Ulno_makes_a_move_from_house_1Test ------------------------> Pit
    *           test               pit3
    * </pre>
    */
   public static final String PROPERTY_PIT3 = "pit3";

   @Property( name = PROPERTY_PIT3, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Pit pit3;

   @Property( name = PROPERTY_PIT3 )
   public boolean setPit3 (Pit value)
   {
      boolean changed = false;

      if (this.pit3 != value)
      {
      
         Pit oldValue = this.pit3;
         this.pit3 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT3 )
   public Ulno_makes_a_move_from_house_1Test withPit3 (Pit value)
   {
      setPit3 (value);
      return this;
   }

   public Pit getPit3 ()
   {
      return this.pit3;
   }

   /**
    * <pre>
    *           0..1     object_pit4     0..1
    * Ulno_makes_a_move_from_house_1Test ------------------------> Pit
    *           test               pit4
    * </pre>
    */
   public static final String PROPERTY_PIT4 = "pit4";

   @Property( name = PROPERTY_PIT4, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Pit pit4;

   @Property( name = PROPERTY_PIT4 )
   public boolean setPit4 (Pit value)
   {
      boolean changed = false;

      if (this.pit4 != value)
      {
      
         Pit oldValue = this.pit4;
         this.pit4 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT4 )
   public Ulno_makes_a_move_from_house_1Test withPit4 (Pit value)
   {
      setPit4 (value);
      return this;
   }

   public Pit getPit4 ()
   {
      return this.pit4;
   }

   /**
    * <pre>
    *           0..1     object_pit5     0..1
    * Ulno_makes_a_move_from_house_1Test ------------------------> Pit
    *           test               pit5
    * </pre>
    */
   public static final String PROPERTY_PIT5 = "pit5";

   @Property( name = PROPERTY_PIT5, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Pit pit5;

   @Property( name = PROPERTY_PIT5 )
   public boolean setPit5 (Pit value)
   {
      boolean changed = false;

      if (this.pit5 != value)
      {
      
         Pit oldValue = this.pit5;
         this.pit5 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT5 )
   public Ulno_makes_a_move_from_house_1Test withPit5 (Pit value)
   {
      setPit5 (value);
      return this;
   }

   public Pit getPit5 ()
   {
      return this.pit5;
   }

   /**
    * <pre>
    *           0..1     object_pit6     0..1
    * Ulno_makes_a_move_from_house_1Test ------------------------> Pit
    *           test               pit6
    * </pre>
    */
   public static final String PROPERTY_PIT6 = "pit6";

   @Property( name = PROPERTY_PIT6, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Pit pit6;

   @Property( name = PROPERTY_PIT6 )
   public boolean setPit6 (Pit value)
   {
      boolean changed = false;

      if (this.pit6 != value)
      {
      
         Pit oldValue = this.pit6;
         this.pit6 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT6 )
   public Ulno_makes_a_move_from_house_1Test withPit6 (Pit value)
   {
      setPit6 (value);
      return this;
   }

   public Pit getPit6 ()
   {
      return this.pit6;
   }

   /**
    * <pre>
    *           0..1     object_pit7     0..1
    * Ulno_makes_a_move_from_house_1Test ------------------------> Pit
    *           test               pit7
    * </pre>
    */
   public static final String PROPERTY_PIT7 = "pit7";

   @Property( name = PROPERTY_PIT7, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Pit pit7;

   @Property( name = PROPERTY_PIT7 )
   public boolean setPit7 (Pit value)
   {
      boolean changed = false;

      if (this.pit7 != value)
      {
      
         Pit oldValue = this.pit7;
         this.pit7 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT7 )
   public Ulno_makes_a_move_from_house_1Test withPit7 (Pit value)
   {
      setPit7 (value);
      return this;
   }

   public Pit getPit7 ()
   {
      return this.pit7;
   }

   /**
    * <pre>
    *           0..1     object_pit8     0..1
    * Ulno_makes_a_move_from_house_1Test ------------------------> Pit
    *           test               pit8
    * </pre>
    */
   public static final String PROPERTY_PIT8 = "pit8";

   @Property( name = PROPERTY_PIT8, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Pit pit8;

   @Property( name = PROPERTY_PIT8 )
   public boolean setPit8 (Pit value)
   {
      boolean changed = false;

      if (this.pit8 != value)
      {
      
         Pit oldValue = this.pit8;
         this.pit8 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT8 )
   public Ulno_makes_a_move_from_house_1Test withPit8 (Pit value)
   {
      setPit8 (value);
      return this;
   }

   public Pit getPit8 ()
   {
      return this.pit8;
   }

   /**
    * <pre>
    *           0..1     object_pit9     0..1
    * Ulno_makes_a_move_from_house_1Test ------------------------> Pit
    *           test               pit9
    * </pre>
    */
   public static final String PROPERTY_PIT9 = "pit9";

   @Property( name = PROPERTY_PIT9, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Pit pit9;

   @Property( name = PROPERTY_PIT9 )
   public boolean setPit9 (Pit value)
   {
      boolean changed = false;

      if (this.pit9 != value)
      {
      
         Pit oldValue = this.pit9;
         this.pit9 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT9 )
   public Ulno_makes_a_move_from_house_1Test withPit9 (Pit value)
   {
      setPit9 (value);
      return this;
   }

   public Pit getPit9 ()
   {
      return this.pit9;
   }

   public void setUp ()
   {
      boolean fujaba__Success = false;
      GameBoard board = null;
      Store artjomStore = null;
      Pit pit1 = null;
      Pit pit2 = null;
      Pit pit3 = null;
      Pit pit4 = null;
      Pit pit5 = null;
      Pit pit6 = null;
      Store ulnoStore = null;
      Pit pit12 = null;
      Pit pit11 = null;
      Pit pit10 = null;
      Pit pit9 = null;
      Pit pit8 = null;
      Pit pit7 = null;
      Player ulno = null;
      Player artjom = null;
      Turn turn = null;

      // // start situation: 
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // create object board
         board = new GameBoard ( );

         // create object artjomStore
         artjomStore = new Store ( );

         // create object pit1
         pit1 = new Pit ( );

         // create object pit2
         pit2 = new Pit ( );

         // create object pit3
         pit3 = new Pit ( );

         // create object pit4
         pit4 = new Pit ( );

         // create object pit5
         pit5 = new Pit ( );

         // create object pit6
         pit6 = new Pit ( );

         // create object ulnoStore
         ulnoStore = new Store ( );

         // create object pit12
         pit12 = new Pit ( );

         // create object pit11
         pit11 = new Pit ( );

         // create object pit10
         pit10 = new Pit ( );

         // create object pit9
         pit9 = new Pit ( );

         // create object pit8
         pit8 = new Pit ( );

         // create object pit7
         pit7 = new Pit ( );

         // create object ulno
         ulno = new Player ( );

         // create object artjom
         artjom = new Player ( );

         // create object turn
         turn = Turn.getInstance();

         // assign attribute ulnoStore
         ulnoStore.setSeeds (15);
         // assign attribute artjomStore
         artjomStore.setSeeds (5);
         // assign attribute pit1
         pit1.setSeeds (1);
         // assign attribute pit2
         pit2.setSeeds (0);
         // assign attribute pit4
         pit4.setSeeds (0);
         // assign attribute pit3
         pit3.setSeeds (0);
         // assign attribute pit5
         pit5.setSeeds (0);
         // assign attribute pit6
         pit6.setSeeds (0);
         // assign attribute pit7
         pit7.setSeeds (1);
         // assign attribute pit8
         pit8.setSeeds (1);
         // assign attribute pit9
         pit9.setSeeds (3);
         // assign attribute pit10
         pit10.setSeeds (0);
         // assign attribute pit11
         pit11.setSeeds (0);
         // assign attribute pit12
         pit12.setSeeds (10);
         // create link object_turn from this to turn
         this.setTurn (turn);

         // create link object_board from this to board
         this.setBoard (board);

         // create link owns from ulno to ulnoStore
         ulno.addToPit (ulnoStore);

         // create link object_ulnoStore from this to ulnoStore
         this.setUlnoStore (ulnoStore);

         // create link owns from artjom to artjomStore
         artjom.addToPit (artjomStore);

         // create link object_artjomStore from this to artjomStore
         this.setArtjomStore (artjomStore);

         // create link owns from pit12 to artjom
         pit12.setPlayer (artjom);

         // create link owns from pit11 to artjom
         pit11.setPlayer (artjom);

         // create link owns from pit10 to artjom
         pit10.setPlayer (artjom);

         // create link owns from pit9 to artjom
         pit9.setPlayer (artjom);

         // create link owns from pit8 to artjom
         pit8.setPlayer (artjom);

         // create link owns from pit7 to artjom
         pit7.setPlayer (artjom);

         // create link object_artjom from this to artjom
         this.setArtjom (artjom);

         // create link owns from pit6 to ulno
         pit6.setPlayer (ulno);

         // create link owns from pit5 to ulno
         pit5.setPlayer (ulno);

         // create link owns from pit4 to ulno
         pit4.setPlayer (ulno);

         // create link owns from pit3 to ulno
         pit3.setPlayer (ulno);

         // create link owns from pit2 to ulno
         pit2.setPlayer (ulno);

         // create link owns from pit1 to ulno
         pit1.setPlayer (ulno);

         // create link has from turn to ulno
         turn.setPlayer (ulno);

         // create link object_ulno from this to ulno
         this.setUlno (ulno);

         // create link contains from board to pit1
         board.addToPit (pit1);

         // create link object_pit1 from this to pit1
         this.setPit1 (pit1);

         // create link contains from board to pit2
         board.addAfterOfPit (pit1, pit2);

         // create link object_pit2 from this to pit2
         this.setPit2 (pit2);

         // create link object_pit4 from this to pit4
         this.setPit4 (pit4);

         // create link contains from board to pit3
         board.addAfterOfPit (pit2, pit3);

         // create link object_pit3 from this to pit3
         this.setPit3 (pit3);

         // create link object_pit5 from this to pit5
         this.setPit5 (pit5);

         // create link object_pit6 from this to pit6
         this.setPit6 (pit6);

         // create link object_pit7 from this to pit7
         this.setPit7 (pit7);

         // create link object_pit8 from this to pit8
         this.setPit8 (pit8);

         // create link object_pit9 from this to pit9
         this.setPit9 (pit9);

         // create link object_pit10 from this to pit10
         this.setPit10 (pit10);

         // create link object_pit11 from this to pit11
         this.setPit11 (pit11);

         // create link object_pit12 from this to pit12
         this.setPit12 (pit12);

         // create link contains from board to pit4
         board.addAfterOfPit (pit3, pit4);

         // create link contains from board to pit5
         board.addAfterOfPit (pit4, pit5);

         // create link contains from board to pit6
         board.addAfterOfPit (pit5, pit6);

         // create link contains from board to ulnoStore
         board.addAfterOfPit (pit6, ulnoStore);

         // create link contains from board to pit7
         board.addAfterOfPit (ulnoStore, pit7);

         // create link contains from board to pit8
         board.addAfterOfPit (pit7, pit8);

         // create link contains from board to pit9
         board.addAfterOfPit (pit8, pit9);

         // create link contains from board to pit10
         board.addAfterOfPit (pit9, pit10);

         // create link contains from board to pit11
         board.addAfterOfPit (pit10, pit11);

         // create link contains from board to pit12
         board.addAfterOfPit (pit11, pit12);

         // create link contains from board to artjomStore
         board.addAfterOfPit (pit12, artjomStore);

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

   }

   public void testUlno_makes_a_move_from_house_1 ()
   {
      boolean fujaba__Success = false;

      // assert result situation
      // story pattern usecasestep
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         this.assertStep1();
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

   }

   /**
    * <pre>
    *           0..1     object_turn     0..1
    * Ulno_makes_a_move_from_house_1Test ------------------------> Turn
    *           test               turn
    * </pre>
    */
   public static final String PROPERTY_TURN = "turn";

   @Property( name = PROPERTY_TURN, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Turn turn;

   @Property( name = PROPERTY_TURN )
   public boolean setTurn (Turn value)
   {
      boolean changed = false;

      if (this.turn != value)
      {
      
         Turn oldValue = this.turn;
         this.turn = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_TURN )
   public Ulno_makes_a_move_from_house_1Test withTurn (Turn value)
   {
      setTurn (value);
      return this;
   }

   public Turn getTurn ()
   {
      return this.turn;
   }

   /**
    * <pre>
    *           0..1     object_ulnoStore     0..1
    * Ulno_makes_a_move_from_house_1Test ------------------------> Store
    *           test               ulnoStore
    * </pre>
    */
   public static final String PROPERTY_ULNO_STORE = "ulnoStore";

   @Property( name = PROPERTY_ULNO_STORE, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Store ulnoStore;

   @Property( name = PROPERTY_ULNO_STORE )
   public boolean setUlnoStore (Store value)
   {
      boolean changed = false;

      if (this.ulnoStore != value)
      {
      
         Store oldValue = this.ulnoStore;
         this.ulnoStore = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_ULNO_STORE )
   public Ulno_makes_a_move_from_house_1Test withUlnoStore (Store value)
   {
      setUlnoStore (value);
      return this;
   }

   public Store getUlnoStore ()
   {
      return this.ulnoStore;
   }

   /**
    * <pre>
    *           0..1     object_ulno     0..1
    * Ulno_makes_a_move_from_house_1Test ------------------------> Player
    *           test               ulno
    * </pre>
    */
   public static final String PROPERTY_ULNO = "ulno";

   @Property( name = PROPERTY_ULNO, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Player ulno;

   @Property( name = PROPERTY_ULNO )
   public boolean setUlno (Player value)
   {
      boolean changed = false;

      if (this.ulno != value)
      {
      
         Player oldValue = this.ulno;
         this.ulno = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_ULNO )
   public Ulno_makes_a_move_from_house_1Test withUlno (Player value)
   {
      setUlno (value);
      return this;
   }

   public Player getUlno ()
   {
      return this.ulno;
   }

   public void removeYou()
   {
      this.setArtjomStore (null);
      this.setArtjom (null);
      this.setBoard (null);
      this.setPit10 (null);
      this.setPit11 (null);
      this.setPit12 (null);
      this.setPit1 (null);
      this.setPit2 (null);
      this.setPit3 (null);
      this.setPit4 (null);
      this.setPit5 (null);
      this.setPit6 (null);
      this.setPit7 (null);
      this.setPit8 (null);
      this.setPit9 (null);
      this.setTurn (null);
      this.setUlnoStore (null);
      this.setUlno (null);
   }
}


