/*
 * generated by Fujaba - CodeGen2
 */
import sysmod.mancala.Store;
import de.uni_kassel.features.annotation.util.Property; // requires Fujaba5/libs/features.jar in classpath
import de.uni_kassel.features.ReferenceHandler; // requires Fujaba5/libs/features.jar in classpath
import sysmod.mancala.HumanPlayer;
import sysmod.mancala.Player;
import sysmod.mancala.Pit;
import sysmod.mancala.Turn;
import sysmod.mancala.CheckWinVisitor;
import de.upb.tools.sdm.*; // requires Fujaba5/libs/RuntimeTools.jar in classpath
import junit.framework.AssertionFailedError;
import java.io.PrintWriter;
import java.io.StringWriter;
import junit.framework.TestCase;


public class Artjom_makes_a_move_from_house_7Test extends TestCase
{



   /**
    * <pre>
    *           0..1     object_artjomStore     0..1
    * Artjom_makes_a_move_from_house_7Test ------------------------> Store
    *           test               artjomStore
    * </pre>
    */
   public static final String PROPERTY_ARTJOM_STORE = "artjomStore";

   @Property( name = PROPERTY_ARTJOM_STORE, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Store artjomStore;

   @Property( name = PROPERTY_ARTJOM_STORE )
   public boolean setArtjomStore (Store value)
   {
      boolean changed = false;

      if (this.artjomStore != value)
      {
      
         Store oldValue = this.artjomStore;
         this.artjomStore = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_ARTJOM_STORE )
   public Artjom_makes_a_move_from_house_7Test withArtjomStore (Store value)
   {
      setArtjomStore (value);
      return this;
   }

   public Store getArtjomStore ()
   {
      return this.artjomStore;
   }

   /**
    * <pre>
    *           0..1     object_artjom     0..1
    * Artjom_makes_a_move_from_house_7Test ------------------------> HumanPlayer
    *           test               artjom
    * </pre>
    */
   public static final String PROPERTY_ARTJOM = "artjom";

   @Property( name = PROPERTY_ARTJOM, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private HumanPlayer artjom;

   @Property( name = PROPERTY_ARTJOM )
   public boolean setArtjom (HumanPlayer value)
   {
      boolean changed = false;

      if (this.artjom != value)
      {
      
         HumanPlayer oldValue = this.artjom;
         this.artjom = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_ARTJOM )
   public Artjom_makes_a_move_from_house_7Test withArtjom (HumanPlayer value)
   {
      setArtjom (value);
      return this;
   }

   public HumanPlayer getArtjom ()
   {
      return this.artjom;
   }

   public void assertStep1 ()
   {
      boolean fujaba__Success = false;

      // // result situation: 
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // check object artjom is really bound
         JavaSDM.ensure ( artjom != null, "check object artjom is really bound" );
         // check object artjomStore is really bound
         JavaSDM.ensure ( artjomStore != null, "check object artjomStore is really bound" );
         // check object pit10 is really bound
         JavaSDM.ensure ( pit10 != null, "check object pit10 is really bound" );
         // check object pit11 is really bound
         JavaSDM.ensure ( pit11 != null, "check object pit11 is really bound" );
         // check object pit12 is really bound
         JavaSDM.ensure ( pit12 != null, "check object pit12 is really bound" );
         // check object pit1 is really bound
         JavaSDM.ensure ( pit1 != null, "check object pit1 is really bound" );
         // check object pit2 is really bound
         JavaSDM.ensure ( pit2 != null, "check object pit2 is really bound" );
         // check object pit3 is really bound
         JavaSDM.ensure ( pit3 != null, "check object pit3 is really bound" );
         // check object pit4 is really bound
         JavaSDM.ensure ( pit4 != null, "check object pit4 is really bound" );
         // check object pit5 is really bound
         JavaSDM.ensure ( pit5 != null, "check object pit5 is really bound" );
         // check object pit6 is really bound
         JavaSDM.ensure ( pit6 != null, "check object pit6 is really bound" );
         // check object pit7 is really bound
         JavaSDM.ensure ( pit7 != null, "check object pit7 is really bound" );
         // check object pit8 is really bound
         JavaSDM.ensure ( pit8 != null, "check object pit8 is really bound" );
         // check object pit9 is really bound
         JavaSDM.ensure ( pit9 != null, "check object pit9 is really bound" );
         // check object turn is really bound
         JavaSDM.ensure ( turn != null, "check object turn is really bound" );
         // check object ulno is really bound
         JavaSDM.ensure ( ulno != null, "check object ulno is really bound" );
         // check object ulnoStore is really bound
         JavaSDM.ensure ( ulnoStore != null, "check object ulnoStore is really bound" );
         // check object visitor is really bound
         JavaSDM.ensure ( visitor != null, "check object visitor is really bound" );
         // check isomorphic binding between objects ulno and artjom
         JavaSDM.ensure ( !ulno.equals (artjom), "check isomorphic binding between objects ulno and artjom" );

         // check isomorphic binding between objects ulnoStore and artjomStore
         JavaSDM.ensure ( !ulnoStore.equals (artjomStore), "check isomorphic binding between objects ulnoStore and artjomStore" );

         // check isomorphic binding between objects pit11 and pit10
         JavaSDM.ensure ( !pit11.equals (pit10), "check isomorphic binding between objects pit11 and pit10" );

         // check isomorphic binding between objects pit12 and pit10
         JavaSDM.ensure ( !pit12.equals (pit10), "check isomorphic binding between objects pit12 and pit10" );

         // check isomorphic binding between objects pit10 and pit1
         JavaSDM.ensure ( !pit10.equals (pit1), "check isomorphic binding between objects pit10 and pit1" );

         // check isomorphic binding between objects pit2 and pit10
         JavaSDM.ensure ( !pit2.equals (pit10), "check isomorphic binding between objects pit2 and pit10" );

         // check isomorphic binding between objects pit3 and pit10
         JavaSDM.ensure ( !pit3.equals (pit10), "check isomorphic binding between objects pit3 and pit10" );

         // check isomorphic binding between objects pit4 and pit10
         JavaSDM.ensure ( !pit4.equals (pit10), "check isomorphic binding between objects pit4 and pit10" );

         // check isomorphic binding between objects pit5 and pit10
         JavaSDM.ensure ( !pit5.equals (pit10), "check isomorphic binding between objects pit5 and pit10" );

         // check isomorphic binding between objects pit6 and pit10
         JavaSDM.ensure ( !pit6.equals (pit10), "check isomorphic binding between objects pit6 and pit10" );

         // check isomorphic binding between objects pit7 and pit10
         JavaSDM.ensure ( !pit7.equals (pit10), "check isomorphic binding between objects pit7 and pit10" );

         // check isomorphic binding between objects pit8 and pit10
         JavaSDM.ensure ( !pit8.equals (pit10), "check isomorphic binding between objects pit8 and pit10" );

         // check isomorphic binding between objects pit9 and pit10
         JavaSDM.ensure ( !pit9.equals (pit10), "check isomorphic binding between objects pit9 and pit10" );

         // check isomorphic binding between objects pit12 and pit11
         JavaSDM.ensure ( !pit12.equals (pit11), "check isomorphic binding between objects pit12 and pit11" );

         // check isomorphic binding between objects pit11 and pit1
         JavaSDM.ensure ( !pit11.equals (pit1), "check isomorphic binding between objects pit11 and pit1" );

         // check isomorphic binding between objects pit2 and pit11
         JavaSDM.ensure ( !pit2.equals (pit11), "check isomorphic binding between objects pit2 and pit11" );

         // check isomorphic binding between objects pit3 and pit11
         JavaSDM.ensure ( !pit3.equals (pit11), "check isomorphic binding between objects pit3 and pit11" );

         // check isomorphic binding between objects pit4 and pit11
         JavaSDM.ensure ( !pit4.equals (pit11), "check isomorphic binding between objects pit4 and pit11" );

         // check isomorphic binding between objects pit5 and pit11
         JavaSDM.ensure ( !pit5.equals (pit11), "check isomorphic binding between objects pit5 and pit11" );

         // check isomorphic binding between objects pit6 and pit11
         JavaSDM.ensure ( !pit6.equals (pit11), "check isomorphic binding between objects pit6 and pit11" );

         // check isomorphic binding between objects pit7 and pit11
         JavaSDM.ensure ( !pit7.equals (pit11), "check isomorphic binding between objects pit7 and pit11" );

         // check isomorphic binding between objects pit8 and pit11
         JavaSDM.ensure ( !pit8.equals (pit11), "check isomorphic binding between objects pit8 and pit11" );

         // check isomorphic binding between objects pit9 and pit11
         JavaSDM.ensure ( !pit9.equals (pit11), "check isomorphic binding between objects pit9 and pit11" );

         // check isomorphic binding between objects pit12 and pit1
         JavaSDM.ensure ( !pit12.equals (pit1), "check isomorphic binding between objects pit12 and pit1" );

         // check isomorphic binding between objects pit2 and pit12
         JavaSDM.ensure ( !pit2.equals (pit12), "check isomorphic binding between objects pit2 and pit12" );

         // check isomorphic binding between objects pit3 and pit12
         JavaSDM.ensure ( !pit3.equals (pit12), "check isomorphic binding between objects pit3 and pit12" );

         // check isomorphic binding between objects pit4 and pit12
         JavaSDM.ensure ( !pit4.equals (pit12), "check isomorphic binding between objects pit4 and pit12" );

         // check isomorphic binding between objects pit5 and pit12
         JavaSDM.ensure ( !pit5.equals (pit12), "check isomorphic binding between objects pit5 and pit12" );

         // check isomorphic binding between objects pit6 and pit12
         JavaSDM.ensure ( !pit6.equals (pit12), "check isomorphic binding between objects pit6 and pit12" );

         // check isomorphic binding between objects pit7 and pit12
         JavaSDM.ensure ( !pit7.equals (pit12), "check isomorphic binding between objects pit7 and pit12" );

         // check isomorphic binding between objects pit8 and pit12
         JavaSDM.ensure ( !pit8.equals (pit12), "check isomorphic binding between objects pit8 and pit12" );

         // check isomorphic binding between objects pit9 and pit12
         JavaSDM.ensure ( !pit9.equals (pit12), "check isomorphic binding between objects pit9 and pit12" );

         // check isomorphic binding between objects pit2 and pit1
         JavaSDM.ensure ( !pit2.equals (pit1), "check isomorphic binding between objects pit2 and pit1" );

         // check isomorphic binding between objects pit3 and pit1
         JavaSDM.ensure ( !pit3.equals (pit1), "check isomorphic binding between objects pit3 and pit1" );

         // check isomorphic binding between objects pit4 and pit1
         JavaSDM.ensure ( !pit4.equals (pit1), "check isomorphic binding between objects pit4 and pit1" );

         // check isomorphic binding between objects pit5 and pit1
         JavaSDM.ensure ( !pit5.equals (pit1), "check isomorphic binding between objects pit5 and pit1" );

         // check isomorphic binding between objects pit6 and pit1
         JavaSDM.ensure ( !pit6.equals (pit1), "check isomorphic binding between objects pit6 and pit1" );

         // check isomorphic binding between objects pit7 and pit1
         JavaSDM.ensure ( !pit7.equals (pit1), "check isomorphic binding between objects pit7 and pit1" );

         // check isomorphic binding between objects pit8 and pit1
         JavaSDM.ensure ( !pit8.equals (pit1), "check isomorphic binding between objects pit8 and pit1" );

         // check isomorphic binding between objects pit9 and pit1
         JavaSDM.ensure ( !pit9.equals (pit1), "check isomorphic binding between objects pit9 and pit1" );

         // check isomorphic binding between objects pit3 and pit2
         JavaSDM.ensure ( !pit3.equals (pit2), "check isomorphic binding between objects pit3 and pit2" );

         // check isomorphic binding between objects pit4 and pit2
         JavaSDM.ensure ( !pit4.equals (pit2), "check isomorphic binding between objects pit4 and pit2" );

         // check isomorphic binding between objects pit5 and pit2
         JavaSDM.ensure ( !pit5.equals (pit2), "check isomorphic binding between objects pit5 and pit2" );

         // check isomorphic binding between objects pit6 and pit2
         JavaSDM.ensure ( !pit6.equals (pit2), "check isomorphic binding between objects pit6 and pit2" );

         // check isomorphic binding between objects pit7 and pit2
         JavaSDM.ensure ( !pit7.equals (pit2), "check isomorphic binding between objects pit7 and pit2" );

         // check isomorphic binding between objects pit8 and pit2
         JavaSDM.ensure ( !pit8.equals (pit2), "check isomorphic binding between objects pit8 and pit2" );

         // check isomorphic binding between objects pit9 and pit2
         JavaSDM.ensure ( !pit9.equals (pit2), "check isomorphic binding between objects pit9 and pit2" );

         // check isomorphic binding between objects pit4 and pit3
         JavaSDM.ensure ( !pit4.equals (pit3), "check isomorphic binding between objects pit4 and pit3" );

         // check isomorphic binding between objects pit5 and pit3
         JavaSDM.ensure ( !pit5.equals (pit3), "check isomorphic binding between objects pit5 and pit3" );

         // check isomorphic binding between objects pit6 and pit3
         JavaSDM.ensure ( !pit6.equals (pit3), "check isomorphic binding between objects pit6 and pit3" );

         // check isomorphic binding between objects pit7 and pit3
         JavaSDM.ensure ( !pit7.equals (pit3), "check isomorphic binding between objects pit7 and pit3" );

         // check isomorphic binding between objects pit8 and pit3
         JavaSDM.ensure ( !pit8.equals (pit3), "check isomorphic binding between objects pit8 and pit3" );

         // check isomorphic binding between objects pit9 and pit3
         JavaSDM.ensure ( !pit9.equals (pit3), "check isomorphic binding between objects pit9 and pit3" );

         // check isomorphic binding between objects pit5 and pit4
         JavaSDM.ensure ( !pit5.equals (pit4), "check isomorphic binding between objects pit5 and pit4" );

         // check isomorphic binding between objects pit6 and pit4
         JavaSDM.ensure ( !pit6.equals (pit4), "check isomorphic binding between objects pit6 and pit4" );

         // check isomorphic binding between objects pit7 and pit4
         JavaSDM.ensure ( !pit7.equals (pit4), "check isomorphic binding between objects pit7 and pit4" );

         // check isomorphic binding between objects pit8 and pit4
         JavaSDM.ensure ( !pit8.equals (pit4), "check isomorphic binding between objects pit8 and pit4" );

         // check isomorphic binding between objects pit9 and pit4
         JavaSDM.ensure ( !pit9.equals (pit4), "check isomorphic binding between objects pit9 and pit4" );

         // check isomorphic binding between objects pit6 and pit5
         JavaSDM.ensure ( !pit6.equals (pit5), "check isomorphic binding between objects pit6 and pit5" );

         // check isomorphic binding between objects pit7 and pit5
         JavaSDM.ensure ( !pit7.equals (pit5), "check isomorphic binding between objects pit7 and pit5" );

         // check isomorphic binding between objects pit8 and pit5
         JavaSDM.ensure ( !pit8.equals (pit5), "check isomorphic binding between objects pit8 and pit5" );

         // check isomorphic binding between objects pit9 and pit5
         JavaSDM.ensure ( !pit9.equals (pit5), "check isomorphic binding between objects pit9 and pit5" );

         // check isomorphic binding between objects pit7 and pit6
         JavaSDM.ensure ( !pit7.equals (pit6), "check isomorphic binding between objects pit7 and pit6" );

         // check isomorphic binding between objects pit8 and pit6
         JavaSDM.ensure ( !pit8.equals (pit6), "check isomorphic binding between objects pit8 and pit6" );

         // check isomorphic binding between objects pit9 and pit6
         JavaSDM.ensure ( !pit9.equals (pit6), "check isomorphic binding between objects pit9 and pit6" );

         // check isomorphic binding between objects pit8 and pit7
         JavaSDM.ensure ( !pit8.equals (pit7), "check isomorphic binding between objects pit8 and pit7" );

         // check isomorphic binding between objects pit9 and pit7
         JavaSDM.ensure ( !pit9.equals (pit7), "check isomorphic binding between objects pit9 and pit7" );

         // check isomorphic binding between objects pit9 and pit8
         JavaSDM.ensure ( !pit9.equals (pit8), "check isomorphic binding between objects pit9 and pit8" );

         // check link has from ulno to turn
         JavaSDM.ensure (turn.equals (ulno.getTurn ()), "check link has from ulno to turn");

         // check link has from artjom to turn
         JavaSDM.ensure (!(turn.equals (artjom.getTurn ())), "check link has from artjom to turn");

         // check link next of from artjomStore to pit1
         JavaSDM.ensure (pit1.equals (artjomStore.getNextPit ()), "check link next of from artjomStore to pit1");

         // check link next of from pit10 to pit11
         JavaSDM.ensure (pit11.equals (pit10.getNextPit ()), "check link next of from pit10 to pit11");

         // check link next of from pit11 to pit12
         JavaSDM.ensure (pit12.equals (pit11.getNextPit ()), "check link next of from pit11 to pit12");

         // check link next of from pit12 to artjomStore
         JavaSDM.ensure (artjomStore.equals (pit12.getNextPit ()), "check link next of from pit12 to artjomStore");

         // check link next of from pit1 to pit2
         JavaSDM.ensure (pit2.equals (pit1.getNextPit ()), "check link next of from pit1 to pit2");

         // check link next of from pit2 to pit3
         JavaSDM.ensure (pit3.equals (pit2.getNextPit ()), "check link next of from pit2 to pit3");

         // check link next of from pit3 to pit4
         JavaSDM.ensure (pit4.equals (pit3.getNextPit ()), "check link next of from pit3 to pit4");

         // check link next of from pit4 to pit5
         JavaSDM.ensure (pit5.equals (pit4.getNextPit ()), "check link next of from pit4 to pit5");

         // check link next of from pit5 to pit6
         JavaSDM.ensure (pit6.equals (pit5.getNextPit ()), "check link next of from pit5 to pit6");

         // check link next of from pit6 to ulnoStore
         JavaSDM.ensure (ulnoStore.equals (pit6.getNextPit ()), "check link next of from pit6 to ulnoStore");

         // check link next of from pit7 to pit8
         JavaSDM.ensure (pit8.equals (pit7.getNextPit ()), "check link next of from pit7 to pit8");

         // check link next of from pit8 to pit9
         JavaSDM.ensure (pit9.equals (pit8.getNextPit ()), "check link next of from pit8 to pit9");

         // check link next of from pit9 to pit10
         JavaSDM.ensure (pit10.equals (pit9.getNextPit ()), "check link next of from pit9 to pit10");

         // check link next of from ulnoStore to pit7
         JavaSDM.ensure (pit7.equals (ulnoStore.getNextPit ()), "check link next of from ulnoStore to pit7");

         // check link opposite of from pit12 to pit1
         JavaSDM.ensure (pit1.equals (pit12.getOppositePit ()), "check link opposite of from pit12 to pit1");

         // check link opposite of from pit11 to pit2
         JavaSDM.ensure (pit2.equals (pit11.getOppositePit ()), "check link opposite of from pit11 to pit2");

         // check link opposite of from pit10 to pit3
         JavaSDM.ensure (pit3.equals (pit10.getOppositePit ()), "check link opposite of from pit10 to pit3");

         // check link opposite of from pit9 to pit4
         JavaSDM.ensure (pit4.equals (pit9.getOppositePit ()), "check link opposite of from pit9 to pit4");

         // check link opposite of from pit8 to pit5
         JavaSDM.ensure (pit5.equals (pit8.getOppositePit ()), "check link opposite of from pit8 to pit5");

         // check link opposite of from pit7 to pit6
         JavaSDM.ensure (pit6.equals (pit7.getOppositePit ()), "check link opposite of from pit7 to pit6");

         // check link owns from artjomStore to artjom
         JavaSDM.ensure (artjom.equals (artjomStore.getPlayer ()), "check link owns from artjomStore to artjom");

         // check link owns from pit10 to artjom
         JavaSDM.ensure (artjom.equals (pit10.getPlayer ()), "check link owns from pit10 to artjom");

         // check link owns from pit11 to artjom
         JavaSDM.ensure (artjom.equals (pit11.getPlayer ()), "check link owns from pit11 to artjom");

         // check link owns from pit12 to artjom
         JavaSDM.ensure (artjom.equals (pit12.getPlayer ()), "check link owns from pit12 to artjom");

         // check link owns from pit7 to artjom
         JavaSDM.ensure (artjom.equals (pit7.getPlayer ()), "check link owns from pit7 to artjom");

         // check link owns from pit8 to artjom
         JavaSDM.ensure (artjom.equals (pit8.getPlayer ()), "check link owns from pit8 to artjom");

         // check link owns from pit9 to artjom
         JavaSDM.ensure (artjom.equals (pit9.getPlayer ()), "check link owns from pit9 to artjom");

         // check link owns from pit1 to ulno
         JavaSDM.ensure (ulno.equals (pit1.getPlayer ()), "check link owns from pit1 to ulno");

         // check link owns from pit2 to ulno
         JavaSDM.ensure (ulno.equals (pit2.getPlayer ()), "check link owns from pit2 to ulno");

         // check link owns from pit3 to ulno
         JavaSDM.ensure (ulno.equals (pit3.getPlayer ()), "check link owns from pit3 to ulno");

         // check link owns from pit4 to ulno
         JavaSDM.ensure (ulno.equals (pit4.getPlayer ()), "check link owns from pit4 to ulno");

         // check link owns from pit5 to ulno
         JavaSDM.ensure (ulno.equals (pit5.getPlayer ()), "check link owns from pit5 to ulno");

         // check link owns from pit6 to ulno
         JavaSDM.ensure (ulno.equals (pit6.getPlayer ()), "check link owns from pit6 to ulno");

         // check link owns from ulnoStore to ulno
         JavaSDM.ensure (ulno.equals (ulnoStore.getPlayer ()), "check link owns from ulnoStore to ulno");

         // attribute condition gameOver == false
         JavaSDM.ensure ( visitor.isGameOver () == false, "attribute condition gameOver == false" );

         // attribute condition seeds == 0
         JavaSDM.ensure ( pit7.getSeeds () == 0, "attribute condition seeds == 0" );

         // attribute condition seeds == 0
         JavaSDM.ensure ( pit1.getSeeds () == 0, "attribute condition seeds == 0" );

         // attribute condition seeds == 0
         JavaSDM.ensure ( pit2.getSeeds () == 0, "attribute condition seeds == 0" );

         // attribute condition seeds == 0
         JavaSDM.ensure ( pit3.getSeeds () == 0, "attribute condition seeds == 0" );

         // attribute condition seeds == 0
         JavaSDM.ensure ( pit4.getSeeds () == 0, "attribute condition seeds == 0" );

         // attribute condition seeds == 0
         JavaSDM.ensure ( pit5.getSeeds () == 0, "attribute condition seeds == 0" );

         // attribute condition seeds == 2
         JavaSDM.ensure ( pit8.getSeeds () == 2, "attribute condition seeds == 2" );

         // attribute condition seeds == 2
         JavaSDM.ensure ( pit9.getSeeds () == 2, "attribute condition seeds == 2" );

         // attribute condition seeds == 2
         JavaSDM.ensure ( pit10.getSeeds () == 2, "attribute condition seeds == 2" );

         // attribute condition seeds == 5
         JavaSDM.ensure ( pit11.getSeeds () == 5, "attribute condition seeds == 5" );

         // attribute condition seeds == 5
         JavaSDM.ensure ( pit12.getSeeds () == 5, "attribute condition seeds == 5" );

         // attribute condition seeds == 6
         JavaSDM.ensure ( artjomStore.getSeeds () == 6, "attribute condition seeds == 6" );

         // attribute condition seeds == 6
         JavaSDM.ensure ( pit6.getSeeds () == 6, "attribute condition seeds == 6" );

         // attribute condition seeds == 8
         JavaSDM.ensure ( ulnoStore.getSeeds () == 8, "attribute condition seeds == 8" );

         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
         StringWriter fujaba_StringWriter = new StringWriter();
         PrintWriter fujaba_PrintWriter = new PrintWriter(fujaba_StringWriter);
         fujaba__InternalException.printStackTrace(fujaba_PrintWriter);
         int length = fujaba__InternalException.getClass().getName().length() + 2;
         AssertionFailedError fujaba_AssertionFailedError = new AssertionFailedError(fujaba_StringWriter.toString().substring(length));
         fujaba_AssertionFailedError.setStackTrace(new StackTraceElement[] {});
         throw fujaba_AssertionFailedError;
      }

   }

   /**
    * <pre>
    *           0..1     object_pit10     0..1
    * Artjom_makes_a_move_from_house_7Test ------------------------> Pit
    *           test               pit10
    * </pre>
    */
   public static final String PROPERTY_PIT10 = "pit10";

   @Property( name = PROPERTY_PIT10, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Pit pit10;

   @Property( name = PROPERTY_PIT10 )
   public boolean setPit10 (Pit value)
   {
      boolean changed = false;

      if (this.pit10 != value)
      {
      
         Pit oldValue = this.pit10;
         this.pit10 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT10 )
   public Artjom_makes_a_move_from_house_7Test withPit10 (Pit value)
   {
      setPit10 (value);
      return this;
   }

   public Pit getPit10 ()
   {
      return this.pit10;
   }

   /**
    * <pre>
    *           0..1     object_pit11     0..1
    * Artjom_makes_a_move_from_house_7Test ------------------------> Pit
    *           test               pit11
    * </pre>
    */
   public static final String PROPERTY_PIT11 = "pit11";

   @Property( name = PROPERTY_PIT11, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Pit pit11;

   @Property( name = PROPERTY_PIT11 )
   public boolean setPit11 (Pit value)
   {
      boolean changed = false;

      if (this.pit11 != value)
      {
      
         Pit oldValue = this.pit11;
         this.pit11 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT11 )
   public Artjom_makes_a_move_from_house_7Test withPit11 (Pit value)
   {
      setPit11 (value);
      return this;
   }

   public Pit getPit11 ()
   {
      return this.pit11;
   }

   /**
    * <pre>
    *           0..1     object_pit12     0..1
    * Artjom_makes_a_move_from_house_7Test ------------------------> Pit
    *           test               pit12
    * </pre>
    */
   public static final String PROPERTY_PIT12 = "pit12";

   @Property( name = PROPERTY_PIT12, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Pit pit12;

   @Property( name = PROPERTY_PIT12 )
   public boolean setPit12 (Pit value)
   {
      boolean changed = false;

      if (this.pit12 != value)
      {
      
         Pit oldValue = this.pit12;
         this.pit12 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT12 )
   public Artjom_makes_a_move_from_house_7Test withPit12 (Pit value)
   {
      setPit12 (value);
      return this;
   }

   public Pit getPit12 ()
   {
      return this.pit12;
   }

   /**
    * <pre>
    *           0..1     object_pit1     0..1
    * Artjom_makes_a_move_from_house_7Test ------------------------> Pit
    *           test               pit1
    * </pre>
    */
   public static final String PROPERTY_PIT1 = "pit1";

   @Property( name = PROPERTY_PIT1, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Pit pit1;

   @Property( name = PROPERTY_PIT1 )
   public boolean setPit1 (Pit value)
   {
      boolean changed = false;

      if (this.pit1 != value)
      {
      
         Pit oldValue = this.pit1;
         this.pit1 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT1 )
   public Artjom_makes_a_move_from_house_7Test withPit1 (Pit value)
   {
      setPit1 (value);
      return this;
   }

   public Pit getPit1 ()
   {
      return this.pit1;
   }

   /**
    * <pre>
    *           0..1     object_pit2     0..1
    * Artjom_makes_a_move_from_house_7Test ------------------------> Pit
    *           test               pit2
    * </pre>
    */
   public static final String PROPERTY_PIT2 = "pit2";

   @Property( name = PROPERTY_PIT2, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Pit pit2;

   @Property( name = PROPERTY_PIT2 )
   public boolean setPit2 (Pit value)
   {
      boolean changed = false;

      if (this.pit2 != value)
      {
      
         Pit oldValue = this.pit2;
         this.pit2 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT2 )
   public Artjom_makes_a_move_from_house_7Test withPit2 (Pit value)
   {
      setPit2 (value);
      return this;
   }

   public Pit getPit2 ()
   {
      return this.pit2;
   }

   /**
    * <pre>
    *           0..1     object_pit3     0..1
    * Artjom_makes_a_move_from_house_7Test ------------------------> Pit
    *           test               pit3
    * </pre>
    */
   public static final String PROPERTY_PIT3 = "pit3";

   @Property( name = PROPERTY_PIT3, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Pit pit3;

   @Property( name = PROPERTY_PIT3 )
   public boolean setPit3 (Pit value)
   {
      boolean changed = false;

      if (this.pit3 != value)
      {
      
         Pit oldValue = this.pit3;
         this.pit3 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT3 )
   public Artjom_makes_a_move_from_house_7Test withPit3 (Pit value)
   {
      setPit3 (value);
      return this;
   }

   public Pit getPit3 ()
   {
      return this.pit3;
   }

   /**
    * <pre>
    *           0..1     object_pit4     0..1
    * Artjom_makes_a_move_from_house_7Test ------------------------> Pit
    *           test               pit4
    * </pre>
    */
   public static final String PROPERTY_PIT4 = "pit4";

   @Property( name = PROPERTY_PIT4, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Pit pit4;

   @Property( name = PROPERTY_PIT4 )
   public boolean setPit4 (Pit value)
   {
      boolean changed = false;

      if (this.pit4 != value)
      {
      
         Pit oldValue = this.pit4;
         this.pit4 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT4 )
   public Artjom_makes_a_move_from_house_7Test withPit4 (Pit value)
   {
      setPit4 (value);
      return this;
   }

   public Pit getPit4 ()
   {
      return this.pit4;
   }

   /**
    * <pre>
    *           0..1     object_pit5     0..1
    * Artjom_makes_a_move_from_house_7Test ------------------------> Pit
    *           test               pit5
    * </pre>
    */
   public static final String PROPERTY_PIT5 = "pit5";

   @Property( name = PROPERTY_PIT5, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Pit pit5;

   @Property( name = PROPERTY_PIT5 )
   public boolean setPit5 (Pit value)
   {
      boolean changed = false;

      if (this.pit5 != value)
      {
      
         Pit oldValue = this.pit5;
         this.pit5 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT5 )
   public Artjom_makes_a_move_from_house_7Test withPit5 (Pit value)
   {
      setPit5 (value);
      return this;
   }

   public Pit getPit5 ()
   {
      return this.pit5;
   }

   /**
    * <pre>
    *           0..1     object_pit6     0..1
    * Artjom_makes_a_move_from_house_7Test ------------------------> Pit
    *           test               pit6
    * </pre>
    */
   public static final String PROPERTY_PIT6 = "pit6";

   @Property( name = PROPERTY_PIT6, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Pit pit6;

   @Property( name = PROPERTY_PIT6 )
   public boolean setPit6 (Pit value)
   {
      boolean changed = false;

      if (this.pit6 != value)
      {
      
         Pit oldValue = this.pit6;
         this.pit6 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT6 )
   public Artjom_makes_a_move_from_house_7Test withPit6 (Pit value)
   {
      setPit6 (value);
      return this;
   }

   public Pit getPit6 ()
   {
      return this.pit6;
   }

   /**
    * <pre>
    *           0..1     object_pit7     0..1
    * Artjom_makes_a_move_from_house_7Test ------------------------> Pit
    *           test               pit7
    * </pre>
    */
   public static final String PROPERTY_PIT7 = "pit7";

   @Property( name = PROPERTY_PIT7, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Pit pit7;

   @Property( name = PROPERTY_PIT7 )
   public boolean setPit7 (Pit value)
   {
      boolean changed = false;

      if (this.pit7 != value)
      {
      
         Pit oldValue = this.pit7;
         this.pit7 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT7 )
   public Artjom_makes_a_move_from_house_7Test withPit7 (Pit value)
   {
      setPit7 (value);
      return this;
   }

   public Pit getPit7 ()
   {
      return this.pit7;
   }

   /**
    * <pre>
    *           0..1     object_pit8     0..1
    * Artjom_makes_a_move_from_house_7Test ------------------------> Pit
    *           test               pit8
    * </pre>
    */
   public static final String PROPERTY_PIT8 = "pit8";

   @Property( name = PROPERTY_PIT8, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Pit pit8;

   @Property( name = PROPERTY_PIT8 )
   public boolean setPit8 (Pit value)
   {
      boolean changed = false;

      if (this.pit8 != value)
      {
      
         Pit oldValue = this.pit8;
         this.pit8 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT8 )
   public Artjom_makes_a_move_from_house_7Test withPit8 (Pit value)
   {
      setPit8 (value);
      return this;
   }

   public Pit getPit8 ()
   {
      return this.pit8;
   }

   /**
    * <pre>
    *           0..1     object_pit9     0..1
    * Artjom_makes_a_move_from_house_7Test ------------------------> Pit
    *           test               pit9
    * </pre>
    */
   public static final String PROPERTY_PIT9 = "pit9";

   @Property( name = PROPERTY_PIT9, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Pit pit9;

   @Property( name = PROPERTY_PIT9 )
   public boolean setPit9 (Pit value)
   {
      boolean changed = false;

      if (this.pit9 != value)
      {
      
         Pit oldValue = this.pit9;
         this.pit9 = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_PIT9 )
   public Artjom_makes_a_move_from_house_7Test withPit9 (Pit value)
   {
      setPit9 (value);
      return this;
   }

   public Pit getPit9 ()
   {
      return this.pit9;
   }

   public void setUp ()
   {
      boolean fujaba__Success = false;
      Store artjomStore = null;
      Pit pit1 = null;
      HumanPlayer artjom = null;
      Pit pit12 = null;
      Store ulnoStore = null;
      Pit pit7 = null;
      HumanPlayer ulno = null;
      Pit pit6 = null;
      Pit pit2 = null;
      Pit pit3 = null;
      Pit pit11 = null;
      Pit pit4 = null;
      Pit pit10 = null;
      Pit pit5 = null;
      Pit pit9 = null;
      Pit pit8 = null;
      Turn turn = null;
      CheckWinVisitor visitor = null;

      // // start situation: 
      // story pattern 
      try 
      {
         fujaba__Success = false; 

         // create object artjomStore
         artjomStore = new Store ( );

         // create object pit1
         pit1 = new Pit ( );

         // create object artjom
         artjom = new HumanPlayer ( );

         // create object pit12
         pit12 = new Pit ( );

         // create object ulnoStore
         ulnoStore = new Store ( );

         // create object pit7
         pit7 = new Pit ( );

         // create object ulno
         ulno = new HumanPlayer ( );

         // create object pit6
         pit6 = new Pit ( );

         // create object pit2
         pit2 = new Pit ( );

         // create object pit3
         pit3 = new Pit ( );

         // create object pit11
         pit11 = new Pit ( );

         // create object pit4
         pit4 = new Pit ( );

         // create object pit10
         pit10 = new Pit ( );

         // create object pit5
         pit5 = new Pit ( );

         // create object pit9
         pit9 = new Pit ( );

         // create object pit8
         pit8 = new Pit ( );

         // create object turn
         turn = Turn.getInstance();

         // create object visitor
         visitor = new CheckWinVisitor ( );

         // assign attribute artjomStore
         artjomStore.setSeeds (6);
         // assign attribute ulnoStore
         ulnoStore.setSeeds (8);
         // assign attribute pit1
         pit1.setSeeds (0);
         // assign attribute pit2
         pit2.setSeeds (0);
         // assign attribute pit3
         pit3.setSeeds (0);
         // assign attribute pit4
         pit4.setSeeds (0);
         // assign attribute pit5
         pit5.setSeeds (0);
         // assign attribute pit6
         pit6.setSeeds (6);
         // assign attribute pit7
         pit7.setSeeds (1);
         // assign attribute pit8
         pit8.setSeeds (1);
         // assign attribute pit9
         pit9.setSeeds (2);
         // assign attribute pit10
         pit10.setSeeds (2);
         // assign attribute pit11
         pit11.setSeeds (5);
         // assign attribute pit12
         pit12.setSeeds (5);
         // create link has from artjom to turn
         artjom.setTurn (turn);

         // create link object_turn from this to turn
         this.setTurn (turn);

         // create link opposite from ulno to artjom
         ulno.setOpposite (artjom);

         // create link object_artjom from this to artjom
         this.setArtjom (artjom);

         // create link object_ulno from this to ulno
         this.setUlno (ulno);

         // create link object_visitor from this to visitor
         this.setVisitor (visitor);

         // create link owns from artjom to artjomStore
         artjom.addToPit (artjomStore);

         // create link next of from pit12 to artjomStore
         pit12.setNextPit (artjomStore);

         // create link object_artjomStore from this to artjomStore
         this.setArtjomStore (artjomStore);

         // create link owns from ulno to ulnoStore
         ulno.addToPit (ulnoStore);

         // create link next of from pit6 to ulnoStore
         pit6.setNextPit (ulnoStore);

         // create link object_ulnoStore from this to ulnoStore
         this.setUlnoStore (ulnoStore);

         // create link opposite of from pit12 to pit1
         pit12.setOppositePit (pit1);

         // create link owns from ulno to pit1
         ulno.addToPit (pit1);

         // create link next of from artjomStore to pit1
         artjomStore.setNextPit (pit1);

         // create link object_pit1 from this to pit1
         this.setPit1 (pit1);

         // create link opposite of from pit11 to pit2
         pit11.setOppositePit (pit2);

         // create link owns from ulno to pit2
         ulno.addToPit (pit2);

         // create link next of from pit1 to pit2
         pit1.setNextPit (pit2);

         // create link object_pit2 from this to pit2
         this.setPit2 (pit2);

         // create link opposite of from pit10 to pit3
         pit10.setOppositePit (pit3);

         // create link owns from ulno to pit3
         ulno.addToPit (pit3);

         // create link next of from pit2 to pit3
         pit2.setNextPit (pit3);

         // create link object_pit3 from this to pit3
         this.setPit3 (pit3);

         // create link opposite of from pit9 to pit4
         pit9.setOppositePit (pit4);

         // create link owns from ulno to pit4
         ulno.addToPit (pit4);

         // create link next of from pit3 to pit4
         pit3.setNextPit (pit4);

         // create link object_pit4 from this to pit4
         this.setPit4 (pit4);

         // create link opposite of from pit8 to pit5
         pit8.setOppositePit (pit5);

         // create link owns from ulno to pit5
         ulno.addToPit (pit5);

         // create link next of from pit4 to pit5
         pit4.setNextPit (pit5);

         // create link object_pit5 from this to pit5
         this.setPit5 (pit5);

         // create link opposite of from pit7 to pit6
         pit7.setOppositePit (pit6);

         // create link owns from ulno to pit6
         ulno.addToPit (pit6);

         // create link next of from pit5 to pit6
         pit5.setNextPit (pit6);

         // create link object_pit6 from this to pit6
         this.setPit6 (pit6);

         // create link owns from artjom to pit7
         artjom.addToPit (pit7);

         // create link next of from ulnoStore to pit7
         ulnoStore.setNextPit (pit7);

         // create link object_pit7 from this to pit7
         this.setPit7 (pit7);

         // create link owns from artjom to pit8
         artjom.addToPit (pit8);

         // create link next of from pit7 to pit8
         pit7.setNextPit (pit8);

         // create link object_pit8 from this to pit8
         this.setPit8 (pit8);

         // create link owns from artjom to pit9
         artjom.addToPit (pit9);

         // create link next of from pit8 to pit9
         pit8.setNextPit (pit9);

         // create link object_pit9 from this to pit9
         this.setPit9 (pit9);

         // create link owns from artjom to pit10
         artjom.addToPit (pit10);

         // create link next of from pit9 to pit10
         pit9.setNextPit (pit10);

         // create link object_pit10 from this to pit10
         this.setPit10 (pit10);

         // create link owns from artjom to pit11
         artjom.addToPit (pit11);

         // create link next of from pit10 to pit11
         pit10.setNextPit (pit11);

         // create link object_pit11 from this to pit11
         this.setPit11 (pit11);

         // create link owns from artjom to pit12
         artjom.addToPit (pit12);

         // create link next of from pit11 to pit12
         pit11.setNextPit (pit12);

         // create link object_pit12 from this to pit12
         this.setPit12 (pit12);

         // collabStat call
         artjom.makeMove(pit7);
         // collabStat call
         pit1.accept(visitor);
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

   }

   public void testArtjom_makes_a_move_from_house_7 ()
   {
      boolean fujaba__Success = false;

      // assert result situation
      // story pattern usecasestep
      try 
      {
         fujaba__Success = false; 

         // collabStat call
         this.assertStep1();
         fujaba__Success = true;
      }
      catch ( JavaSDMException fujaba__InternalException )
      {
         fujaba__Success = false;
      }

   }

   /**
    * <pre>
    *           0..1     object_turn     0..1
    * Artjom_makes_a_move_from_house_7Test ------------------------> Turn
    *           test               turn
    * </pre>
    */
   public static final String PROPERTY_TURN = "turn";

   @Property( name = PROPERTY_TURN, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Turn turn;

   @Property( name = PROPERTY_TURN )
   public boolean setTurn (Turn value)
   {
      boolean changed = false;

      if (this.turn != value)
      {
      
         Turn oldValue = this.turn;
         this.turn = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_TURN )
   public Artjom_makes_a_move_from_house_7Test withTurn (Turn value)
   {
      setTurn (value);
      return this;
   }

   public Turn getTurn ()
   {
      return this.turn;
   }

   /**
    * <pre>
    *           0..1     object_ulnoStore     0..1
    * Artjom_makes_a_move_from_house_7Test ------------------------> Store
    *           test               ulnoStore
    * </pre>
    */
   public static final String PROPERTY_ULNO_STORE = "ulnoStore";

   @Property( name = PROPERTY_ULNO_STORE, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private Store ulnoStore;

   @Property( name = PROPERTY_ULNO_STORE )
   public boolean setUlnoStore (Store value)
   {
      boolean changed = false;

      if (this.ulnoStore != value)
      {
      
         Store oldValue = this.ulnoStore;
         this.ulnoStore = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_ULNO_STORE )
   public Artjom_makes_a_move_from_house_7Test withUlnoStore (Store value)
   {
      setUlnoStore (value);
      return this;
   }

   public Store getUlnoStore ()
   {
      return this.ulnoStore;
   }

   /**
    * <pre>
    *           0..1     object_ulno     0..1
    * Artjom_makes_a_move_from_house_7Test ------------------------> HumanPlayer
    *           test               ulno
    * </pre>
    */
   public static final String PROPERTY_ULNO = "ulno";

   @Property( name = PROPERTY_ULNO, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private HumanPlayer ulno;

   @Property( name = PROPERTY_ULNO )
   public boolean setUlno (HumanPlayer value)
   {
      boolean changed = false;

      if (this.ulno != value)
      {
      
         HumanPlayer oldValue = this.ulno;
         this.ulno = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_ULNO )
   public Artjom_makes_a_move_from_house_7Test withUlno (HumanPlayer value)
   {
      setUlno (value);
      return this;
   }

   public HumanPlayer getUlno ()
   {
      return this.ulno;
   }

   /**
    * <pre>
    *           0..1     object_visitor     0..1
    * Artjom_makes_a_move_from_house_7Test ------------------------> CheckWinVisitor
    *           test               visitor
    * </pre>
    */
   public static final String PROPERTY_VISITOR = "visitor";

   @Property( name = PROPERTY_VISITOR, kind = ReferenceHandler.ReferenceKind.TO_ONE,
         adornment = ReferenceHandler.Adornment.NONE)
   private CheckWinVisitor visitor;

   @Property( name = PROPERTY_VISITOR )
   public boolean setVisitor (CheckWinVisitor value)
   {
      boolean changed = false;

      if (this.visitor != value)
      {
      
         CheckWinVisitor oldValue = this.visitor;
         this.visitor = value;
         changed = true;
      
      }
      return changed;
   }

   @Property( name = PROPERTY_VISITOR )
   public Artjom_makes_a_move_from_house_7Test withVisitor (CheckWinVisitor value)
   {
      setVisitor (value);
      return this;
   }

   public CheckWinVisitor getVisitor ()
   {
      return this.visitor;
   }

   public void removeYou()
   {
      this.setArtjomStore (null);
      this.setArtjom (null);
      this.setPit10 (null);
      this.setPit11 (null);
      this.setPit12 (null);
      this.setPit1 (null);
      this.setPit2 (null);
      this.setPit3 (null);
      this.setPit4 (null);
      this.setPit5 (null);
      this.setPit6 (null);
      this.setPit7 (null);
      this.setPit8 (null);
      this.setPit9 (null);
      this.setTurn (null);
      this.setUlnoStore (null);
      this.setUlno (null);
      this.setVisitor (null);
   }
}


